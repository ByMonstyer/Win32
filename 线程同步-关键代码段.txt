const int MAX_TIMES = 10;
int g_nIndex = 0;
DWORD g_dwTimes[MAX_TIMES];
CRITICAL_SECTION g_cs;

UINT CMFCApplication1Dlg::thread1(LPVOID p)
{
	while (g_nIndex <MAX_TIMES)
	{
		EnterCriticalSection(&g_cs);
		g_dwTimes[g_nIndex] = GetTickCount();
		g_nIndex++;
		LeaveCriticalSection(&g_cs);
	}
	return 0;
}

UINT  CMFCApplication1Dlg::thread2(LPVOID p)
{
	while (g_nIndex < MAX_TIMES)
	{
		EnterCriticalSection(&g_cs);
		g_nIndex++;
		g_dwTimes[g_nIndex-1] = GetTickCount();
		LeaveCriticalSection(&g_cs);
	}
	return 0;
}

InitializeCriticalSection(&g_cs);
AfxBeginThread(thread1, this);
AfxBeginThread(thread2, this);


Critical section（临界区）用来实现“排他性占有”。适用范围是单一进程
的各线程之间。它是：
i 一个用户对象，不是一个核心对象。
i 快速而有效率。
i 不能够同时有一个以上的 critical section 被等待。
i 无法侦测是否已被某个线程放弃